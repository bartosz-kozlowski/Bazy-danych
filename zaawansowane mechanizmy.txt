1.
SELECT NAZWISKO, PLACA_POD FROM PRACOWNICY ORDER BY PLACA_POD DESC FETCH FIRST 3 ROWS ONLY;

SELECT NAZWISKO, PLACA_POD
FROM (SELECT NAZWISKO, PLACA_POD FROM PRACOWNICY ORDER BY PLACA_POD DESC)
WHERE ROWNUM <= 3;
2.
SELECT NAZWISKO, PLACA_POD FROM PRACOWNICY ORDER BY PLACA_POD DESC, NAZWISKO DESC OFFSET 5 ROWS FETCH FIRST 5 ROWS ONLY;

SELECT NAZWISKO, PLACA_POD
FROM (SELECT NAZWISKO, PLACA_POD AS PLACA_POD, ROWNUM AS poz FROM PRACOWNICY ORDER BY PLACA_POD DESC)
WHERE poz BETWEEN 6 AND 10;
3.
WITH SREDNIA AS (SELECT AVG(PLACA_POD) AS SREDNIA, ID_ZESP AS ZESPOL FROM PRACOWNICY GROUP BY ID_ZESP)
SELECT P.NAZWISKO, P.PLACA_POD, P.PLACA_POD - S.SREDNIA AS ROZNICA FROM PRACOWNICY P, SREDNIA S WHERE S.ZESPOL = P.ID_ZESP AND P.PLACA_POD - S.SREDNIA > 0
ORDER BY P.NAZWISKO;
4.
WITH LATA AS (SELECT EXTRACT(YEAR FROM ZATRUDNIONY) AS lat FROM PRACOWNICY GROUP BY EXTRACT(YEAR FROM ZATRUDNIONY))
SELECT lat, COUNT(*) AS LICZBA FROM LATA, PRACOWNICY WHERE lat = EXTRACT(YEAR FROM ZATRUDNIONY) GROUP BY lat ORDER BY LICZBA DESC;
5.
WITH LATA AS (SELECT EXTRACT(YEAR FROM ZATRUDNIONY) AS ROK FROM PRACOWNICY GROUP BY EXTRACT(YEAR FROM ZATRUDNIONY))
SELECT ROK, COUNT(*) AS LICZBA FROM LATA, PRACOWNICY WHERE ROK = EXTRACT(YEAR FROM ZATRUDNIONY) GROUP BY ROK ORDER BY LICZBA DESC FETCH FIRST 1 ROW ONLY;
6.
WITH ASYSTENCI AS (SELECT * FROM PRACOWNICY WHERE ETAT = 'ASYSTENT'),
PIOTROWO AS (SELECT * FROM ZESPOLY WHERE ADRES = 'PIOTROWO 3A')
SELECT ASYSTENCI.NAZWISKO, ASYSTENCI.ETAT, PIOTROWO.NAZWA, PIOTROWO.ADRES FROM PIOTROWO, ASYSTENCI
WHERE ASYSTENCI.ID_ZESP = PIOTROWO.ID_ZESP;
7.
WITH MAKS_SUMA AS (SELECT ID_ZESP AS ZESPOL, SUM(PLACA_POD) AS MAKS_SUMA_PLAC FROM PRACOWNICY P GROUP BY ID_ZESP)
SELECT z.NAZWA, MAKS_SUMA_PLAC FROM MAKS_SUMA p, ZESPOLY z WHERE z.id_zesp = ZESPOL ORDER BY MAKS_SUMA_PLAC DESC FETCH FIRST 1 ROW ONLY;
8.
WITH
podwladni (id_prac, id_szefa, nazwisko, poziom) AS
-- definicja korzenia hierarchii
(SELECT id_prac, id_szefa, nazwisko, 1
FROM pracownicy
WHERE nazwisko = 'BRZEZINSKI'
UNION ALL
-- rekurencyjna definicja niższych poziomów
SELECT p.id_prac, p.id_szefa, p.nazwisko, poziom+1
FROM podwladni s JOIN pracownicy p ON s.id_prac = p.id_szefa)
-- wskazanie sposobu przeszukiwania hierarchii i sortowania rekordów-dzieci
SEARCH DEPTH FIRST BY nazwisko SET porzadek_potomkow
SELECT nazwisko, poziom AS POZYCJA_W_HIERARCHII
FROM podwladni
ORDER BY porzadek_potomkow;

SELECT NAZWISKO, LEVEL AS POZYCJA_W_HIERARCHII
FROM PRACOWNICY
CONNECT BY ID_SZEFA = PRIOR ID_PRAC
START WITH NAZWISKO = 'BRZEZINSKI'
ORDER SIBLINGS BY NAZWISKO;
9.
SELECT (rpad(' ', LEVEL - 1, ' ') || nazwisko) as NAZWISKO_p, LEVEL AS POZYCJA_W_HIERARCHII
FROM pracownicy
CONNECT BY id_szefa = PRIOR id_prac
START WITH nazwisko = 'BRZEZINSKI'
ORDER SIBLINGS BY nazwisko;
10.
WITH LICZBY AS(SELECT 0 AS digit, 'ZERO' AS word FROM dual
UNION ALL
SELECT 1, 'JEDEN' FROM dual
UNION ALL
SELECT 2, 'DWA' FROM dual
UNION ALL
SELECT 3, 'TRZY' FROM dual
UNION ALL
SELECT 4, 'CZTERY' FROM dual
UNION ALL
SELECT 5, 'PIĘĆ' FROM dual
UNION ALL
SELECT 6, 'SZEŚĆ' FROM dual
UNION ALL
SELECT 7, 'SIEDEM' FROM dual
UNION ALL
SELECT 8, 'OSIEM' FROM dual
UNION ALL
SELECT 9, 'DZIEWIĘĆ' FROM dual
ORDER BY 1)
SELECT (NAZWISKO || ', zarobki w tysiącach: ' || WORD) AS ZAROBKI
FROM PRACOWNICY JOIN LICZBY ON FLOOR((PLACA_POD + COALESCE(PLACA_DOD, 0)) / 1000) = LICZBY.DIGIT
ORDER BY NAZWISKO;
